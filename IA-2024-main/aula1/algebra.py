# -*- coding: utf-8 -*-
"""algebra.ipynb

Automatically generated by Colaboratory.

# Bibliotecas
"""

import plotly.graph_objects as go
import numpy as np

"""# Escalar"""

# Valor do escalar
escalar = 10

# Criar visualização
fig = go.Figure()

# Adicionar ponto para representar o escalar
fig.add_trace(go.Scatter3d(x=[0],
                           y=[0],
                           z=[0],
                           mode='markers',
                           marker=dict(color='red'),
                           text=[f'Escalar: {escalar}']))

# Configurar layout
fig.update_layout(scene=dict(aspectmode="cube",
                             xaxis_title='Eixo x',
                             yaxis_title='Eixo y',
                             zaxis_title='Eixo z'))

# Mostrar figura
fig.show()

"""# Vetor"""

# Vetor unidimensional
vetor = [4]

# Criar visualização em Plotly
fig = go.Figure()

# Adicionar vetor unidimensional
fig.add_trace(go.Scatter(x=[0, vetor[0]], y=[0, 0],
                         mode='lines+markers', line=dict(color='blue', width=4),
                         marker=dict(size=10, color='blue')))

# Configurar layout
fig.update_layout(xaxis_title='Eixo x', yaxis_title='Eixo y', title='Vetor Unidimensional')

# Mostrar figura
fig.show()

"""# Matriz"""

# Matriz 2x3 como exemplo
matriz = np.array([[1, 2, 3],
                   [4, 5, 6]])

# Criar visualização em Plotly
fig = go.Figure()

# Adicionar pontos para representar a matriz
fig.add_trace(go.Scatter(x=[1, 1, 1, 2, 2, 2], y=[1, 2, 3, 1, 2, 3],
                         mode='markers',
                         marker=dict(size=12, color='blue'),
                         text=[f'Matriz[{i+1}][{j+1}]: {matriz[i][j]}' for i in range(2) for j in range(3)]))

# Configurar layout
fig.update_layout(xaxis_title='Linhas', yaxis_title='Colunas', title='Representação de Matriz')

# Mostrar figura
fig.show()

"""# Tensor"""

# Tensor tridimensional como exemplo (2x2x2)
tensor = np.array([[[1, 2], [3, 4]],
                   [[5, 6], [7, 8]]])

# Criar visualização em Plotly
fig = go.Figure()

# Adicionar pontos para representar o tensor
for i in range(tensor.shape[0]):
    for j in range(tensor.shape[1]):
        for k in range(tensor.shape[2]):
            fig.add_trace(go.Scatter3d(x=[j], y=[k], z=[i],
                                       mode='markers',
                                       marker=dict(size=12, color='orange'),
                                       text=f'Tensor[{i+1}][{j+1}][{k+1}]: {tensor[i][j][k]}'))

# Configurar layout
fig.update_layout(scene=dict(aspectmode="cube", xaxis_title='Colunas',
                             yaxis_title='Profundidade',
                             zaxis_title='Linhas'),
                  title='Representação de Tensor Tridimensional')

# Mostrar figura
fig.show()

"""# Operações com vetores"""

# Soma
vetor1 = np.array([2, 3, 1])
vetor2 = np.array([-1, 2, 4])

soma_vetores = vetor1 + vetor2

print("Soma de Vetores:", soma_vetores)

# Escalar
vetor = np.array([2, 3, 1])
escalar = 3

vetor_multiplicado = escalar * vetor

print("Vetor Original:", vetor)
print(f"Vetor Multiplicado por Escalar {escalar}:", vetor_multiplicado)

# Produto escalar
produto_escalar = np.dot(vetor1, vetor2)

print("Produto Escalar:", produto_escalar)

"""# Representação visual

## Soma
"""

# Vetores
vetor1 = np.array([2, 3, 1])
vetor2 = np.array([-1, 2, 4])
soma_vetores = vetor1 + vetor2

# Criar visualização em Plotly
fig = go.Figure()

# Adicionar vetores originais
fig.add_trace(go.Scatter3d(x=[0, vetor1[0]],
                           y=[0, vetor1[1]],
                           z=[0, vetor1[2]],
                           mode='lines+markers',
                           line=dict(color='blue', width=4),
                           marker=dict(size=10, color='blue'),
                           name='Vetor 1'))

fig.add_trace(go.Scatter3d(x=[0, vetor2[0]],
                           y=[0, vetor2[1]],
                           z=[0, vetor2[2]],
                           mode='lines+markers',
                           line=dict(color='red', width=4),
                           marker=dict(size=10, color='red'),
                           name='Vetor 2'))

# Adicionar vetor soma
fig.add_trace(go.Scatter3d(x=[0, soma_vetores[0]],
                           y=[0, soma_vetores[1]],
                           z=[0, soma_vetores[2]],
                           mode='lines+markers',
                           line=dict(color='green', width=4),
                           marker=dict(size=10, color='green'),
                           name='Soma Vetores'))

# Configurar layout
fig.update_layout(scene=dict(aspectmode="cube",
                             xaxis_title='Eixo x',
                             yaxis_title='Eixo y',
                             zaxis_title='Eixo z'),
                             title='Soma de Vetores')

# Mostrar figura
fig.show()

"""## Escalar"""

# Vetor e escalar
vetor = np.array([2, 3, 1])
escalar = 3
vetor_multiplicado = escalar * vetor

# Criar visualização em Plotly
fig = go.Figure()

# Adicionar vetor original
fig.add_trace(go.Scatter3d(x=[0, vetor[0]], y=[0, vetor[1]], z=[0, vetor[2]],
                           mode='lines+markers', line=dict(color='blue', width=4),
                           marker=dict(size=10, color='blue'), name='Vetor Original'))

# Adicionar vetor multiplicado por escalar
fig.add_trace(go.Scatter3d(x=[0, vetor_multiplicado[0]],
                           y=[0, vetor_multiplicado[1]],
                           z=[0, vetor_multiplicado[2]],
                           mode='lines+markers',
                           line=dict(color='green', width=4),
                           marker=dict(size=10, color='green'),
                           name='Vetor Multiplicado'))

# Configurar layout
fig.update_layout(scene=dict(aspectmode="cube", xaxis_title='Eixo x',
                             yaxis_title='Eixo y',
                             zaxis_title='Eixo z'),
                  title='Multiplicação de Vetor por Escalar')

# Mostrar figura
fig.show()

"""## Produto"""

# Vetores
vetor1 = np.array([2, 3, 1])
vetor2 = np.array([-1, 2, 4])

# Calcular produto escalar
produto_escalar = np.dot(vetor1, vetor2)

# Criar visualização em Plotly
fig = go.Figure()

# Adicionar vetores originais
fig.add_trace(go.Scatter3d(x=[0, vetor1[0]], y=[0, vetor1[1]], z=[0, vetor1[2]],
                           mode='lines+markers', line=dict(color='blue', width=4),
                           marker=dict(size=10, color='blue'), name='Vetor 1'))

fig.add_trace(go.Scatter3d(x=[0, vetor2[0]], y=[0, vetor2[1]], z=[0, vetor2[2]],
                           mode='lines+markers', line=dict(color='red', width=4),
                           marker=dict(size=10, color='red'), name='Vetor 2'))

# Adicionar ponto para representar o produto escalar
fig.add_trace(go.Scatter3d(x=[vetor1[0]], y=[vetor1[1]], z=[vetor1[2]],
                           mode='markers', marker=dict(size=12, color='green'),
                           text=f'Produto Escalar: {produto_escalar}', name='Produto Escalar'))

# Adicionar linha para representar a projeção
projecao = (produto_escalar / np.linalg.norm(vetor2**2)) * vetor2
fig.add_trace(go.Scatter3d(x=[0, projecao[0]], y=[0, projecao[1]], z=[0, projecao[2]],
                           mode='lines', line=dict(color='gray', width=2), name='Projeção'))

# Configurar layout
fig.update_layout(scene=dict(aspectmode="cube", xaxis_title='Eixo x',
                             yaxis_title='Eixo y', zaxis_title='Eixo z'),
                  title='Produto Escalar de Vetor 1 e Vetor 2')

# Mostrar figura
fig.show()
